api-version: reviewpad.com/v3.x

extends:
  - https://github.com/reviewpad/.github/blob/main/reviewpad-models/common.yml

labels:
  external-contribution:
    description: External contribution
    color: "#8a2151"
  plugins:
    description: Modifications to the plugins directory
    color: "#294b72"
  critical:
    description: Modifications to critical changes
    color: "#294b75"
  waiting-review:
    description: Pull request is waiting for review
    color: "#cccc00"
  requires-author-attention:
    description: Pull request requires author attention
    color: "#b20000"

groups:
  - name: owners
    description: Group of owners
    kind: developers
    spec: '["marcelosousa", "ferreiratiago"]'

  - name: plugins-reviewers
    description: Group of plugin reviewers
    spec: '["marcelosousa", "ferreiratiago", "shay2025", "zolamk"]'

  - name: maintainers
    description: Official maintainers
    spec: '["marcelosousa", "ferreiratiago"]'

  - name: rising-stars
    description: Rising stars in the team
    spec: '["shay2025", "zolamk"]'

  - name: official-contributors
    description: Reviewpad core contributors
    spec: $append($group("maintainers"), $group("rising-stars"))

rules:
  - name: is-renovate-bot
    description: Author is Renovate Bot
    spec: $author() == "renovate[bot]"

  - name: is-external-contribution
    description: Author is not a Reviewpad core contributor
    spec: '!$isElementOf($author(), $group("official-contributors"))'

  - name: ci-succeeded
    description: Pipeline succeeded
    spec: $checkRunConclusion("pr-build") == "success"

  - name: touches-plugin-functions
    description: Modifies the plugin functions
    spec: $hasFilePattern("plugins/aladino/functions/**")

  - name: touches-plugin-actions
    description: Modifies the plugin actions
    spec: $hasFilePattern("plugins/aladino/actions/**")

  - name: touches-plugin-functions-and-actions
    description: Modifies both plugin actions and functions
    spec: $rule("touches-plugin-actions") && $rule("touches-plugin-functions")

  - name: touches-plugin-functions-or-actions-and-not-builtins
    description: Modifies plugins but not built-ins
    spec: ($rule("touches-plugin-actions") || $rule("touches-plugin-functions")) && !$hasFileName("plugins/aladino/builtins.go")

workflows:
  # Define who needs to pay attention to the pull request
  - name: attention-set
    always-run: true
    if:
      - rule: $isWaitingForReview()
        extra-actions:
          - $addLabel("waiting-review")
      - rule: '!$isWaitingForReview()'
        extra-actions:
          - $removeLabel("waiting-review")
      - rule: $hasUnaddressedThreads()
        extra-actions:
          - $addLabel("requires-author-attention")
          - $info($sprintf("@%s requires your attention!", [$author()]))
      - rule: '!$hasUnaddressedThreads()'
        extra-actions:
          - $removeLabel("requires-author-attention")

  # Welcome external contributors
  - name: external-contribution
    always-run: true
    if:
      - rule: is-external-contribution
        extra-actions:
          - $addLabel("external-contribution")
      - rule: $rule("is-external-contribution") && !$rule("is-renovate-bot")
        extra-actions:
          - $info($sprintf("@%s thanks for your contribution!", [$author()]))

  # Bind the pull request to the project
  - name: add-to-project
    always-run: true
    if:
      - '!$hasLinkedIssues() && !$isLinkedToProject("Reviewpad")'
    then:
      - $addToProject("Reviewpad", "In Review")

  # When the build fails, we need to make sure that the reviewer is aware of it.
  - name: build-fails
    always-run: true
    if:
      - $checkRunConclusion("pr-build") == "failure"
    then:
      - $review("REQUEST_CHANGES", "The build failed. Please fix it before continuing.")

  # When changing critical code, we need to make sure that the reviewer is aware of it.
  - name: changes-to-critical-code
    always-run: true
    if:
      - $hasAnnotation("critical")
      - $hasFileName("runner.go")
    then:
      - $addLabel("critical")
      - $assignReviewer($group("owners"), 1)

  # When changing plugins, we need to make sure that the documentation is updated.
  - name: changes-to-plugins
    always-run: true
    if:
      - rule: touches-plugin-functions
      - rule: touches-plugin-actions
    then:
      - $addLabel("plugins")
      - $assignReviewer($group("plugins-reviewers"), 1)
      - $info("If you are adding or updating a built-in, please do not forget to update the [docs](https://github.com/reviewpad/docs)")

  # When changing both functions and actions, we need to make sure that this is intentional.
  - name: contained-plugin-changes
    always-run: true
    if:
      - rule: touches-plugin-functions-and-actions
    then:
      - $warn("It looks like you modified both functions and actions. Is that intentional?")

  # When changing plugins but not built-ins, we need to make sure that this is intentional.
  - name: help-with-builtins
    always-run: true
    if:
      - rule: touches-plugin-functions-or-actions-and-not-builtins
    then:
      - $info("If you have added a new function or action do not forget to include it in the built-in list!")

pipelines:
  # When the pull request touches the LICENSE file
  - name: license
    trigger: $hasFileName("LICENSE")
    stages:
      - actions:
          - $error("Sorry, you are not authorized to make these changes")
          - $close()
        until: $isElementOf($author(), $group("owners"))
      - actions:
          - $error("You are changing more than the LICENSE file. Pull request that change the LICENSE file should only modify the LICENSE file.")
        until: $fileCount() == 1
      - actions:
          - $addLabel("modifies-license")
          - $assignReviewer($group("owners"), 1)

  # When the pull request is in ship mode
  - name: ship-mode
    trigger: $rule("is-ship")
    stages:
      - actions:
          - $error("Only owners can use ship mode. Please choose another pull request merge strategy.")
        until: $isElementOf($author(), $group("owners"))
      - actions:
          - $error("Pull request cannot be in ship state when in draft mode.")
        until: '!$isDraft()'
      - actions:
          - $error("Pull request cannot be in ship state when it has do-not-merge label.")
        until: '!$isElementOf("do-not-merge", $labels())'
      # Check if the pull request CI succeeded or if it only includes markdown changes
      - actions:
          - $addLabel("waiting-checks")
        until: $rule("ci-succeeded") || $hasFileExtensions([".md"])
      - actions:
          - $approve("Pull request is in ship mode and the build is green.")
          - $merge("rebase")

  # When the pull request is from renovate bot
  - name: renovate-bot
    trigger: $author() == "renovate[bot]"
    stages:
      - actions:
          - $comment("Pull request is not up to date with the base branch. Reviewpad will rebase it for you. Please wait for the rebase to complete.")
          - $rebase()
        until: $isUpdatedWithBaseBranch() && $hasLinearHistory()
      - actions:
          - $addLabel("waiting-checks")
        until: $rule("ci-succeeded")
      - actions:
          - $assignReviewer($group("owners"), 1)
        until: $hasRequiredApprovals(1, $group("owners"))
      - actions:
          - $comment("Pull request is ready to be merged. Reviewpad will merge it for you. Please wait for the merge to complete.")
          - $merge("rebase")
