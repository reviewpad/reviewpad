// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/explore-dev/atlas-common/go/api/services (interfaces: SemanticClient)

// Package aladino is a generated GoMock package.
package aladino

import (
	context "context"
	reflect "reflect"

	services "github.com/explore-dev/atlas-common/go/api/services"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSemanticClient is a mock of SemanticClient interface.
type MockSemanticClient struct {
	ctrl     *gomock.Controller
	recorder *MockSemanticClientMockRecorder
}

// MockSemanticClientMockRecorder is the mock recorder for MockSemanticClient.
type MockSemanticClientMockRecorder struct {
	mock *MockSemanticClient
}

// NewMockSemanticClient creates a new mock instance.
func NewMockSemanticClient(ctrl *gomock.Controller) *MockSemanticClient {
	mock := &MockSemanticClient{ctrl: ctrl}
	mock.recorder = &MockSemanticClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSemanticClient) EXPECT() *MockSemanticClientMockRecorder {
	return m.recorder
}

// GetSymbols mocks base method.
func (m *MockSemanticClient) GetSymbols(arg0 context.Context, arg1 *services.GetSymbolsRequest, arg2 ...grpc.CallOption) (*services.GetSymbolsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSymbols", varargs...)
	ret0, _ := ret[0].(*services.GetSymbolsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymbols indicates an expected call of GetSymbols.
func (mr *MockSemanticClientMockRecorder) GetSymbols(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbols", reflect.TypeOf((*MockSemanticClient)(nil).GetSymbols), varargs...)
}
